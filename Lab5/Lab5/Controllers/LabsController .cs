using Lab5.Models;
using LabsLibrary;
using Microsoft.AspNetCore.Mvc;

namespace Lab5.Controllers
{
    public class LabsController : Controller
    {
        public IActionResult Lab1()
        {
            var model = new LabViewModel
            {
                LabNumber = "1",
                Variant = "2",
                Description = "Перестановкою N елементів називається впорядкований набір N різних чисел від 1 до N. Розміщенням порядку K називають підмножина елементів деякої перестановки порядку N.Наприклад,"+
                "(1, 3) – розміщення порядку 2 для перестановки(1, 2, 3) порядку 3. Потрібно за заданим розміщенням визначити його позицію в лексикографічному порядку всіх можливих розміщень, утворених з різних перестановок порядку N."+                
                "Наприклад, лексикографічна послідовність всіляких розміщень для K = 2 і N = 3 виглядає так:(1, 2), (1, 3), (2, 1), (2, 3), (3, 1), (3, 2) Таким чином, переміщення (2, 3) має номер 4 у цій послідовності.",
                InputDescription = "У першому рядку вхідного файлу INPUT.TXT знаходяться числа N і K (1 ≤ K ≤ N ≤ 12). У другому рядку записані K чисел з діапазону від 1 до N – розміщення.",
                OutputDescription = "У вихідний файл OUTPUT.TXT виведіть однину - номер даного розміщення.",
                TestCases = new List<TestCase>
            {
                new TestCase { Input = "3 2\n3 2", Output = "6" },
            }
            };
            return View("Lab", model);
        }

        public IActionResult Lab2()
        {
            var model = new LabViewModel
            {
                LabNumber = "2",
                Variant = "2",
                Description = "Російський бізнесмен Іван Петров закупив у Китаї велику партію наручного годинника, щоб продати їх на батьківщині за півціни (тобто в 5 разів дорожче, ніж вони коштували в Китаї). Іван зіткнувся з проблемою: китайський годинник виявився неякісним. Мало того, що годинник працював протягом декількох годин, поки його не стукнеш, так ще й час підводити незручно: обертати можна не хвилинну, а лише секундну стрілку, причому, що найжахливіше, тільки в один бік у напрямку збільшення часу. Наприклад, для того, щоб підвести годинник на секунду тому, необхідно було зробити більше 700 повних обертів секундної стрілки, на що Іван витратив більше 10 хвилин." + 
                            "Щоб продати цей годинник оптом Івану необхідно на момент угоди створити видимість того, о годинник справний.Для цього він збирається зупинити весь годинник, встановити його на один і той же час.А перед угодою вдарити по валізі з годинником, щоб вони всі дружно пішли." +
                            "Допоможіть Івану з'ясувати: який час на годиннику краще встановити для того, щоб Іван витратив якнайменше часу для того, щоб підвести всі годинники.",
                InputDescription = "У першому рядку вхідного файлу INPUT.TXT міститься натуральне число N – кількість годин (N ≤ 50000). У наступних N рядках розташовуються показання всіх годинників у форматі h:mm:ss, де h – показує котра година, mm – хвилини, ss - секунди (1 ≤ h ≤ 12, 0 ≤ mm ≤ 59, 0 ≤ ss ≤ 59).",
                OutputDescription = "Вихідний файл OUTPUT.TXT повинен містити час, який потрібно встановити на всіх годинниках, у форматі, вказаному вище. У разі неоднозначної відповіді виведіть найменший час.",
                TestCases = new List<TestCase>
            {
                new TestCase { Input = "3\n8:19:16\n2:05:11\n12:50:07", Output = "2:05:11" },
            }
            };
            return View("Lab", model);
        }

        public IActionResult Lab3()
        {
            var model = new LabViewModel
            {
                LabNumber = "3",
                Variant = "2",
                Description = "Розплющивши очі, Принц Персії виявив, що знаходиться на верхньому рівні підземного лабіринту Джаффара. Лабіринт складається з рівнів h, розташованих строго один під одним. Кожен рівень є прямокутним майданчиком, розбитим на m х n ділянок. На деяких ділянках стоять колони, які підтримують стелю, на такі ділянки Принц заходити не може.\r\nПринц може переміщатися з однієї ділянки на інший сусідній вільний ділянку того ж рівня, так само він може проломити підлогу під собою і виявитися рівнем нижче (на самому нижньому рівні підлогу проломити не можна). Будь-яке переміщення займає у Принца 5 секунд.\r\nНа одній із ділянок нижнього рівня на Принца чекає Принцеса. Допоможіть Принцу знайти Принцесу, витративши на це якнайменше часу.\r\n",
                InputDescription = "У першому рядку вхідного файлу INPUT.TXT містяться натуральні числа h, m і n — висота та горизонтальні розміри лабіринту (2 ≤ h, m, n ≤ 50). Далі у вхідному файлі наведені блоки h, що описують рівні лабіринту в порядку від верхнього до нижнього. Кожен блок містить m рядків, по n символів у кожному: «.» позначає вільну ділянку, «о» позначає ділянку з колоною, «1» позначає вільну ділянку, в якій опинився Принц на початку своєї подорожі, «2» позначає вільну ділянку, на якій нудиться Принцеса. Символи \"1\" і \"2\" зустрічаються у вхідному файлі рівно по одному разу: символ \"1\" - в описі найвищого рівня, а символ \"2\" - в описі самого нижнього. Сусідні блоки розділені одним порожнім рядком.",
                OutputDescription = "У вихідний файл OUTPUT.TXT виведіть мінімальний час у секундах, необхідний Принцу, щоб знайти Принцесу. Оскільки добро завжди перемагає Зло, то гарантується, що Принц може це зробити.",
                TestCases = new List<TestCase>
            {
                new TestCase
                {
                    Input = "3\n3\n31..oo.\nnooo..o.oo\noooo..o.2",
                    Output = "60"
                }
            }
            };
            return View("Lab", model);
        }

        [HttpPost]
        public async Task<IActionResult> ProcessLab(int labNumber, IFormFile inputFile)
        {
            if (inputFile == null || inputFile.Length == 0)
                return BadRequest("Please upload a valid file.");

            string[] lines;
            using (var reader = new StreamReader(inputFile.OpenReadStream()))
            {
                lines = (await reader.ReadToEndAsync())
                        .Split(Environment.NewLine, StringSplitOptions.RemoveEmptyEntries);
            }

            string output = string.Empty;

            try
            {
                switch (labNumber)
                {
                    case 1:
                        output = string.Join(Environment.NewLine, Lab1Helper.ProcessLab1Inputs(lines));
                        break;

                    case 2:
                        output = Lab2Helper.CountLab2Ways(lines);
                 
                        break;

                    case 3:
                        output = Lab3Helper.FindLab3ShortestPath(lines);
                        break;

                    default:
                        return BadRequest("Invalid lab number. Please specify 1, 2, or 3.");
                }
            }
            catch (Exception ex)
            {
                return BadRequest($"Error processing lab: {ex.Message}");
            }

            return Json(new { output });
        }


    }
}
